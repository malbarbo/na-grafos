#!/usr/bin/env python3
# encoding: utf-8

import os
import yaml

from pandocfilters import toJSONFilter, RawInline, RawBlock, CodeBlock, Image
from pygments import highlight
from pygments.lexers import get_lexer_by_name
from pygments.formatters import get_formatter_by_name

GRAPHICS_INLINE = r'{\begingroup\setbox0=\hbox{\Oldincludegraphics[%s]{%s}}\parbox{\wd0}{\box0}\endgroup}'
GRAPHICS = r'\Oldincludegraphics[%s]{%s}'

conf = yaml.load(open('conf.yaml'))

def pandoc_filter(key, value, format, meta):
    if format not in ['latex', 'beamer']:
        return

    if key == 'Image':
        return process_image(value)

    if key == 'CodeBlock':
        return process_codeblock(value)

def process_image(value):
    [p, [opts_name, fig]] = value
    if opts_name.startswith('['):
        opts, name = opts_name[1:].split(']', 1)
        opts = opts.replace('%20', ' ').split(',')
        path = image_path(name)
        if 'inline' in opts:
            # TODO: colocar label
            opts = list(filter('inline'.__ne__, opts))
            g = GRAPHICS_INLINE % (','.join(opts), path)
        else:
            # TODO: colocar label
            g = GRAPHICS % (','.join(opts), path)
        return RawInline('latex', g)
    else:
        return Image(p, [image_path(opts_name), fig])

def process_codeblock(value):
    [[ident, classes, keyvals], code] = value

    if len(classes) == 0:
        lexer_name = 'text'
    else:
        lexer_name = classes[0]

    lexer = get_lexer_by_name(lexer_name)
    formatter = get_formatter_by_name('latex', stripall=True, texcomments=True)

    code_h = highlight(code, lexer, formatter)
    code_h = code_h.replace(u'λ', r'\mylambda{}')

    # Retorna um bloco vazio de código seguido do bloco de código formatado
    # O bloco vazio serve para indicar para o pandoc que ele deve colocar a
    # flag verbatim no beamer. Este bloco não é exibido porque nos templates os
    # blocos verbatim são marcado como comentários
    return [CodeBlock([ident, [], []], ''), RawBlock('latex', code_h)]

def image_path(name):
    return os.path.join(conf['target_dir'], 'images', name + conf['images_ext'])

if __name__ == "__main__":
    toJSONFilter(pandoc_filter)
